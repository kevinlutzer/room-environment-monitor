#!/bin/bash

BIN_DIR=$PWD/bin
CACHE_DIR=$PWD/.cache
LIBS=$PWD/controller,$PWD/credentials,$PWD/terminal,$PWD/FreeRTOS_CLI
PLATFORM=esp32:esp32:esp32c3
LOCAL_PORT=/dev/cu.usbserial-1110

REMOTE_USER=ubuntu
REMOTE_HOST=192.168.1.100
REMOTE_PORT=/dev/ttyUSB0

# Install the needed arduino libs
setup() {
    arduino-cli lib install PubSubClient
    arduino-cli lib install PM1006K
    arduino-cli lib install ArduinoJson
    arduino-cli lib install UUID
    
    arduino-cli lib install "Adafruit BME280 Library"
    arduino-cli lib install "Adafruit NeoPixel"    
}

# build the client code
compile() {
    mkdir -p $BIN_DIR
    mkdir -p $CACHE_DIR

    arduino-cli compile -b $PLATFORM --output-dir=$BIN_DIR --library=$LIBS --build-cache-path=$CACHE_DIR -v
}

copy-remote() {
    scp -r $PWD/bin $REMOTE_USER@$REMOTE_HOST:/home/$REMOTE_USER/
}

upload-remote() {
    ssh $REMOTE_USER@$REMOTE_HOST "/home/ubuntu/bin/arduino-cli upload -b esp32:esp32:esp32c3 -p $REMOTE_PORT --input-dir=/home/$REMOTE_USER/bin -v" 
}

upload() {
    arduino-cli upload -b esp32:esp32:esp32c3 -p $LOCAL_PORT --input-dir=$BIN_DIR -v
}

# if setup is specified, do that, otherwise just build
if [ "$1" == "setup" ]; then
    setup
    exit 0
elif [ "$1" == "compile" ]; then
    compile
    exit 0
elif [ "$1" == "copy-remote" ]; then
    copy-remote
    exit 0
elif [ "$1" == "upload-remote" ]; then
    upload-remote
    exit 0
elif [ "$1" == "upload" ]; then
    upload
    exit 0
elif [ "$1" == "terminal" ]; then
    tio --baudrate=115200 $LOCAL_PORT
    exit 0
fi

compile